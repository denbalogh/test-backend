openapi: 3.0.0
servers:
  - url: 'http://localhost:5000/tpa/v1'
    description: Local development server
info:
  title: "fable+ Team Performance Scan Backend"
  description: |
    <h1>Default Responses</h1>

    Every route can, in addition to the defined responses for the specific
    route, return one of the default responses defined here.

    Responses that return with an HTTP status code other than 200 will
    additionally contain the `X-ErrorCode` header set to the
    corresponsing error code.

    <table>
        <thead>
            <tr>
                <th>Response Code</th>
                <th>Error</th>
                <th>Description</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>400</td>
                <td>1002</td>
                <td>JSON body is missing</td>
            </tr>
            <tr>
                <td>400</td>
                <td>1003</td>
                <td>JSON body is malformed</td>
            </tr>
            <tr>
                <td>400</td>
                <td>1005</td>
                <td>Bad parameter</td>
            </tr>
            <tr>
                <td>400</td>
                <td>1006</td>
                <td>Invalid header</td>
            </tr>
            <tr>
                <td>401</td>
                <td>1101</td>
                <td>Authorization header is missing</td>
            </tr>
            <tr>
                <td>401</td>
                <td>1102</td>
                <td>The session has expired</td>
            </tr>
            <tr>
                <td>401</td>
                <td>1103</td>
                <td>Invalid session token</td>
            </tr>
            <tr>
                <td>403</td>
                <td>1104</td>
                <td>Client origin violation</td>
            </tr>
            <tr>
                <td>403</td>
                <td>1105</td>
                <td>The access to this function is not allowed for the logged in user</td>
            </tr>
            <tr>
                <td>403</td>
                <td>1106</td>
                <td>The provided authorization header is not valid</td>
            </tr>
            <tr>
                <td>404</td>
                <td>1001</td>
                <td>The ressource was not found</td>
            </tr>
            <tr>
                <td>405</td>
                <td>1004</td>
                <td>The HTTP method is not allowed on this route</td>
            </tr>
        </tbody>
    </table>
  version: "1.0.0"
  contact:
    name: fable+
    email: it@fableplus.com
    url: https://fableplus.com/
security:
  - apiAuth: []
tags: 
  - name: General
    description: General and static endpoints
  - name: User
    description: User management module
paths:
  #region general
  /static/info:
    get:
      operationId: getStaticInfo
      description: Get static information from the API.
      tags:
      - General
      responses:
        '200':
          description: Static information is returned
  #endregion

  #region user
  #error codes 12xx
  /user/info:
    get:
      operationId: getUserInfo
      description: Get user information for currently logged in user
      tags:
      - User
      responses:
        '200':
          description: User information is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userInfoResponse'

  /user/login:
    post:
      operationId: loginUser
      description: >-
        Route is used to authenticate a user with the API service and to obtain
        a session token. Authentication can either be by mail and password for
        registered users, or with an invitation ID.
      tags:
      - User
      security: []
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userLoginResponse'
        '403':
          description: Invalid credentials
          x-ErrorCode: 1203
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      requestBody:
        $ref: '#/components/requestBodies/userLoginRequest'

  /user/register:
    post:
      operationId: registerUser
      description: Route creates a new user.
      tags:
      - User
      responses:
        '200':
          description: User successfuly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdResponse'
        '400':
          description: Invalid password format
          x-ErrorCode: 1201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
        '409':
          description: E-Mail already registered
          x-ErrorCode: 1202
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      requestBody:
        $ref: '#/components/requestBodies/userRegistrationRequest'
        
  /user/update:
    post:
      operationId: updateUser
      description: Update personal data for user.
      tags:
      - User
      responses:
        '200':
          description: User data successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
        '400':
          description: Invalid password format
          x-ErrorCode: 1201
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/errorResponse'
      requestBody:
        $ref: '#/components/requestBodies/userUpdateRequest'

  /user/logout:
    post:
      operationId: logoutUser
      description: Logout user and delete current session
      tags:
      - User
      responses:
        '200':
          description: User was logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
  #endregion

  #region team
  # error codes 13xx
  #(reserved error codes: 1301)
  /team:
    get:
      operationId: listTeams
      description: List all teams the current user is a member of.
      tags:
        - Team
      responses:
        200:
          description: Team list is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamListResponse'
    post:
      operationId: createTeam
      description: Create a new team
      tags:
        - Team
      responses:
        '200':
          description: Team successfuly created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdResponse'
      requestBody:
        $ref: '#/components/requestBodies/teamCreateRequest'

  /team/{teamId}:
    parameters:
      - $ref: '#/components/parameters/teamId'
    get:
      operationId: getTeam
      description: Get information on team
      tags:
        - Team
      responses:
        200:
          description: Team info is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamInfoResponse'
    patch:
      operationId: updateTeam
      description: Update a team
      tags:
        - Team
      responses:
        '200':
          description: Team successfuly updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
      requestBody:
        $ref: '#/components/requestBodies/teamUpdateRequest'

  /team/{teamId}/members:
    parameters:
      - $ref: '#/components/parameters/teamId'
    get:
      operationId: listTeamMembers
      description: Get all team members
      tags:
        - Team
      responses:
        200:
          description: Team members are returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/teamMemberResponse'
    patch:
      operationId: updateTeamMembers
      description: Add members to the team or change a members role. Added members will be invited to existing opened surveys.
      tags:
        - Team
      responses:
        '200':
          description: Team members successfuly added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
      requestBody:
        $ref: '#/components/requestBodies/teamMemberAddRequest'
    delete:
      operationId: removeTeamMember
      description: Remove a member from a team
      parameters:
        - name: members
          in: query
          required: true
          description: Mail addresses of team members to remove
          schema:
            type: array
            items:
              type: string
            minItems: 1
      tags:
        - Team
      responses:
        '200':
          description: Team member successfuly removed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/successResponse'
  #endregion


components:
  securitySchemes:
    apiAuth:
      type: http
      scheme: bearer
      description: |
        Authentication with API session token
      bearerFormat: API session token

  parameters:
    userId:
      name: userId
      description: ID of the user.
      in: path
      required: true
      schema:
        type: string
    teamId:
      name: teamId
      description: ID of the team. For a team member, this can be set to 'current'.
      in: path
      required: true
      schema:
        type: string

  requestBodies:
    userLoginRequest:
      content:
        application/json:
          schema:
            $ref: user_login_req.json
    userRegistrationRequest:
      content:
        application/json:
          schema:
            $ref: user_registration_req.json
    userUpdateRequest:
      content:
        application/json:
          schema:
            $ref: user_update_req.json

    teamCreateRequest:
      content:
        application/json:
          schema:
            $ref: team_create_req.json
    teamUpdateRequest:
      content:
        application/json:
          schema:
            $ref: team_update_req.json
    teamMemberAddRequest:
      content:
        application/json:
          schema:
            $ref: team_member_add_req.json

  schemas:
    baseResponse:
        type: object
        properties: {}
    successResponse:
      allOf:
        - type: object
          properties:
            success:
              type: boolean
        - $ref: '#/components/schemas/baseResponse'
    createdResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: '#/components/schemas/baseResponse'
    errorResponse:
      allOf:
        - type: object
          properties:
            error:
              type: object
              properties:
                errorCode:
                  type: integer
                errorMessage:
                  type: string
        - $ref: '#/components/schemas/baseResponse'

    userInfoResponse:
      allOf:
        - $ref: 'user_info_resp.json'
        - $ref: '#/components/schemas/baseResponse'
    userLoginResponse:
      allOf:
        - $ref: '#/components/schemas/baseResponse'
        - $ref: 'user_login_resp.json'

    teamListResponse:
      allOf:
        - $ref: '#/components/schemas/baseResponse'
        - $ref: 'team_list_resp.json'
    teamInfoResponse:
      allOf:
        - $ref: '#/components/schemas/baseResponse'
        - $ref: 'team_info_resp.json'
    teamMemberResponse:
      allOf:
        - $ref: '#/components/schemas/baseResponse'
        - $ref: 'team_member_resp.json'
    